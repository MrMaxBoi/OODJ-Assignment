/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import com.raven.data.User;
import com.raven.data.UserRepository;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author ljsljs
 */
public class Form_ADMIN_AccountManagement extends javax.swing.JPanel {

    public Form_ADMIN_AccountManagement() {
        initComponents();
        loadUserIDs();
    }
    
    private String getRolePrefix(String role) {
        switch (role) {
            case "Sales Manager": return "SM";
            case "Purchase Manager": return "PM";
            case "Inventory Manager": return "IM";
            case "Finance Manager": return "FM";
            default: return "AD"; // For Admin or other roles
        }
    }

    private void loadUserIDs() {
        try {
            List<User> users = UserRepository.loadUsers();
            jComboBox1.removeAllItems();
            for (User user : users) {
                jComboBox1.addItem(user.getWorkID());
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading users: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("UserID:");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Account Management");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("New Password:");

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/Save.png"))); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/AddNewUser.png"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton)
                            .addComponent(jTextField1))))
                .addGap(140, 140, 140)
                .addComponent(addButton)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton)
                    .addComponent(addButton))
                .addGap(126, 126, 126))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String selectedUserID = (String) jComboBox1.getSelectedItem();
        String newPassword = jTextField1.getText().trim();

        if (selectedUserID == null || selectedUserID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (newPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new password", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            List<User> users = UserRepository.loadUsers();
            for (int i = 0; i < users.size(); i++) {
                User user = users.get(i);
                if (user.getWorkID().equals(selectedUserID)) {
                    // Update password by replacing the user in the list
                    users.set(i, new User(user.getWorkID(), user.getName(), newPassword, user.getRole()));
                    break;
                }
            }
            UserRepository.saveUsers(users);
            JOptionPane.showMessageDialog(this, "Password updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            jTextField1.setText("");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error updating password: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JPanel panel = new JPanel(new GridLayout(0, 2, 10, 10));
        
        JComboBox<String> roleComboBox = new JComboBox<>(new String[]{"Sales Manager", "Purchase Manager", "Inventory Manager", "Finance Manager"});
        JTextField userIDField = new JTextField();
        userIDField.setEditable(false);
        JTextField nameField = new JTextField();
        JTextField passwordField = new JTextField();
        
        panel.add(new JLabel("Role:"));
        panel.add(roleComboBox);
        panel.add(new JLabel("User ID:"));
        panel.add(userIDField);
        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Password:"));
        panel.add(passwordField);
        
        // Add listener to generate user ID when role is selected
        roleComboBox.addActionListener(e -> {
            try {
                String selectedRole = (String) roleComboBox.getSelectedItem();
                String prefix = getRolePrefix(selectedRole);
                List<User> users = UserRepository.loadUsers();
                
                int maxNumber = 0;
                for (User user : users) {
                    if (user.getWorkID().startsWith(prefix)) {
                        try {
                            int num = Integer.parseInt(user.getWorkID().substring(prefix.length()));
                            if (num > maxNumber) {
                                maxNumber = num;
                            }
                        } catch (NumberFormatException ex) {
                            // Ignore if the suffix isn't a number
                        }
                    }
                }
                
                userIDField.setText(prefix + String.format("%03d", maxNumber + 1));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error generating user ID: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        // Trigger the initial generation
        roleComboBox.setSelectedIndex(0);
        
        int result = JOptionPane.showConfirmDialog(
            this, 
            panel, 
            "Add New User", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );
        
        if (result == JOptionPane.OK_OPTION) {
            String role = (String) roleComboBox.getSelectedItem();
            String userID = userIDField.getText();
            String name = nameField.getText().trim();
            String password = passwordField.getText().trim();
            
            if (name.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Name and password cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try {
                User newUser = new User(userID, name, password, role);
                UserRepository.addUser(newUser);
                JOptionPane.showMessageDialog(this, "User added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadUserIDs(); // Refresh the combo box
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error adding user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
